# 一、推荐引擎模块
# 	接受请求
# 	处理请求
# 	返回结果
#
# 二、制造日志
# 	日志格式：
# 		cookie
# 		uid
# 		user agent
# 		ip
# 		video_id
# 		topic
# 		order_id
# 		log_type
#
# 	日志种类：
# 		点击
# 		播放
# 		点赞
# 		收藏
# 		付费观看
# 		站外分享
# 		评论
#
#
# 三、重定向营销
# 	重定向：向消费者推送他看过、买过等行为过得item。
# 	电商重定向
# 	电影重定向
# 	文章重定向
#
# 四、处理日志
# 	处理点击日志
# 	点击日志重定向
#
#
# 五、流式处理
# 概念：
# 优点：
# 	低延时
# 	动态效果好
# 	用户体验好
# 	转化率高
# 缺点：
# 	资源消耗严重
# 	效果准确度有影响
# 	效果起伏大、分析原因难
# 逻辑：
#
#
#
# 六、推荐引擎实践
#     1、同类目商品推荐： 生成日志 --> 处理日志 --> 保存结果到文件 --> 文件推送到推荐引擎
#     2、相关类目商品推荐：
#         跟同类商品推荐一样，只不过将相关联的类别存入到同一个文件中。
#     3、一致性哈希适应
#     4、多线程内存更新
#     5、人工干预推荐(在推荐系统很重要)
#
#
# 七、实现符合业务场景的推荐算法
# 三大推荐引擎
#     1、电商推荐
#     2、内容推荐
#     3、社交推荐
#
# 内容场景推荐引擎：
# 场景：
#     小说网站
#     缺乏运营
# 使用习惯：
#     重度用户
# 搭建推荐引擎：
#     分词工具
#     设计流程模块
#         数据预处理    jieba分词
#             数据准备
#                 构建小说
#                 存储到指定路径
#                 制定存储格式
#                 确保能找到
#         生成索引
#         加入引擎
#         接受请求
#         相应请求
#     coding
#     real time ranking
#         实时打分
#             制定规则
#             搭建软件环境 【Redis Python】
#             设计数据流向链条    【日志数据--> redis --> 数据处理 --> 结果 redis --> server --> 推荐列表】
#         实时排序
#
#
#
# 八、推荐算法分支
#
# 协同过滤推荐算法
"""
    基于邻域的协同过滤推荐算法
        UCF:
        ICF:
        距离计算：（人工选择）
            欧几里得距离
            曼哈顿距离
            海明距离
            切比雪夫距离
            马哈拉诺比斯距离
            明可夫斯基距离
        相似度计算：
            余弦相似度/调整的余弦相似度
            皮尔逊相关系数
            jaccard相似系数
            Tinimoto系数
            对数似然相似度
            互信息/信息增益, 相对熵/KL散度
            TF-IDF

    基于模型的协同过滤推荐算法：基于历史数据训练模型（深度学习、机器学习），再用该模型预测
        基于关联算法的协同过滤
            Apriori: 找出频繁集          https://baijiahao.baidu.com/s?id=1578453192439039733&wfr=spider&for=pc
                user1：1 2 3
                user2:3 2 1
                user3:2 4 3
                频繁集：2 3
            FPGROWTH:Apriori的加强版

        基于聚类算法的协同过滤
            K-means:
                K-means++
                elkan K-means
                mini batch K-means(最常用)

            BIRCH:

        基于分类算法的协同过滤
            逻辑回归：（target= like | dislike）
            朴素贝叶斯                    https://www.cnblogs.com/marc01in/p/4775440.html

        基于回归算法的协同过滤

        基于矩阵分解的协同过滤

        基于神经网络的协同过滤
            深度学习

        基于图模型的协同过滤

        基于隐语义模型的协同过滤

优点：
    # 实现快
    # 对商品、用户没有要求
    # 效果有保障
缺点：
    # 冷启动：
    # 马太效应：
    # 推荐解释模糊：

"""
# 基于内容推荐算法
# 混合推荐算法
# 流行度推荐算法

# 九、实现规则推荐算法
#   movieLens datasets
#   K-means:
#        用户聚类
#        商品聚类
